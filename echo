#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/socket.h>

int main()
{
    char *ip = "127.0.0.1";
     int port = 5566;
    int n;
    int client_sock;
    char buffer[1024];
    char response[1024];
    struct sockaddr_in client_addr;
    socklen_t addr_size;
    client_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (client_sock < 0)
    {
        perror("Binding Error");
        exit(0);
    }
    printf("Client Socket is created\n");
    memset(&client_addr, '\0', sizeof(client_addr));
    client_addr.sin_family = AF_INET;
    client_addr.sin_port = port;
    client_addr.sin_addr.s_addr = inet_addr(ip);
    

    addr_size = sizeof(client_addr);

    n = connect(client_sock, (struct sockaddr *)&client_addr, addr_size);

    if (n < 0)
    {
        perror("Connection error");
        exit(0);
    }

    printf("Client Successfully connected to client_addr\n");
    bzero(buffer, sizeof(buffer)); // Initialize the buffer
    int bytes_received = recv(client_sock, buffer, sizeof(buffer), 0);
    if (bytes_received < 0)
    {
        perror("Receive error");
        exit(0);
    }

    buffer[bytes_received] = '\0'; // Add a null-terminator to make it a valid C string
    printf("Server: %s\n", buffer);
    bzero(buffer,1024);
    printf("Enter the message to server : ");
    gets(response);
    strcpy(buffer,response);
    send(client_sock,buffer,sizeof(buffer),0);



    return 0;
}  





















server 


#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<unistd.h>
#include<arpa/inet.h>
#include<sys/types.h>
#include<sys/socket.h>


int main()
{
    char *ip = "127.0.0.1";
    int port = 5566;
    int n;
    char buffer[1024];
    int client_sock,server_sock;
    struct sockaddr_in server_addr,client_addr;
    socklen_t addr_size;
    
    
    
    server_sock = socket(AF_INET,SOCK_STREAM,0);
    if(server_sock<0)
    {
        perror("Socket Error");
        exit (0);
    }
    printf("Server Socket created succesfully\n");
    
    
    
    memset(&server_addr,'\0',sizeof(server_addr));
    
    
    server_addr.sin_family = AF_INET;
    server_addr.sin_port=port;
    server_addr.sin_addr.s_addr=inet_addr(ip);
    
    
    memset(&server_addr.sin_zero,'\0',sizeof(server_addr.sin_zero));
    n= bind(server_sock,(struct sockaddr*)&server_addr,sizeof(server_addr));
    if(n<0)
    {
        perror("Bind error");
        exit(0);
    }
    printf("Socket Bind at port %d succesfully\n",port);
    listen(server_sock,5);
    printf("Listening....\n");
    while (1)
    {   
        addr_size=sizeof(client_addr);
        client_sock = accept(server_sock,(struct sockaddr*)&client_addr,&addr_size);
        printf("Client is connected\n");
        bzero(buffer,1024);
        strcpy(buffer,"Hello Welcome to Network");
        send(client_sock,buffer,sizeof(buffer),0);
        
        bzero(buffer,1024);
        recv(client_sock,buffer,sizeof(buffer),0);
        printf("Client : %s\n",buffer);
        

        
        close(client_sock);
        printf("Client is disconnected \n");

        
    }
    return 0;


}






