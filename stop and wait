#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<string.h>
#include<arpa/inet.h>

int main()
{
    char *ip = "127.0.0.1";
    int port=5566;
    int client_sock;
    struct sockaddr_in client_addr;
    socklen_t clientaddr_size;
    int n;
    char buffer[1024];
    int Ack;
    int data;
    int res;
    int fcount=1;
    client_sock=socket(AF_INET,SOCK_STREAM,0);
    if(client_sock<0)
    {
        perror("socket error");
        exit(0);
    }
    printf("client Socket created Successfully \n");
    memset(&client_addr,'\0',sizeof(client_addr));
    client_addr.sin_family=AF_INET;
    client_addr.sin_port=port;
    client_addr.sin_addr.s_addr=inet_addr(ip);
    clientaddr_size=sizeof(client_addr);
    connect(client_sock,(struct sockaddr*)&client_addr,clientaddr_size);
    bzero(buffer,1024);
    recv(client_sock,buffer,sizeof(buffer),0);
    printf("Server : ");
    puts(buffer);
    bzero(buffer,1024);
    strcpy(buffer,"Hello Server");
    send(client_sock,buffer,sizeof(buffer),0);



    while(fcount<=10)
    {
        res=recv(client_sock,&data,sizeof(data),0);
        if(res>0)
        {
            printf("Frame%d recived Successfully data = %d\n",fcount,data);
            Ack=1;
            send(client_sock,&Ack,sizeof(Ack),0);
            fcount++;
        }
        else{
            printf("Frame%d Not recived Successfully \n",fcount);
            printf("Server Resending the Frame%d",fcount);
        }

    

    }
    printf("All 10 Frames Recieved \n");
    close(client_sock);
    printf("You disconnected from server\n");

    return 0;
    


}



server



#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<string.h>
#include<arpa/inet.h>

int main()
{
    char *ip = "127.0.0.1";
    int port=5566;
    int server_sock,client_sock;
    struct sockaddr_in server_addr,client_addr;
    socklen_t serveraddr_size, clientaddr_size;
    int n;
    int res;
    char buffer[1024];
    int frame[10]={1001,10101,101101,1000,0010,11111,00000,10101,101010,11110};
    int fcount=0;
    int Ack;
    server_sock=socket(AF_INET,SOCK_STREAM,0);
    if(server_sock<0)
    {
        perror("socket error");
        exit(0);
    }
    printf("Server Socket created Successfully \n");
    memset(&server_addr,'\0',sizeof(server_addr));
    server_addr.sin_family=AF_INET;
    server_addr.sin_port=port;
    server_addr.sin_addr.s_addr=inet_addr(ip);
    serveraddr_size=sizeof(server_addr);
    n = bind(server_sock,(struct sockaddr*)&server_addr,serveraddr_size);
    if(n<0)
    {
        perror("Binding Error");
        exit(0);
    }
    printf("The socket bind at port %d\n",port);
    listen(server_sock,5);
    printf("Listening.....\n");
    while(1)
    {
        clientaddr_size=sizeof(client_addr);
        client_sock=accept(server_sock,(struct sockaddr*)&client_addr,&clientaddr_size);
        if(client_sock<0)
        {
            perror("Accepting Error");
            exit(0);
        }
        printf("Client Connected Successfully\n");
        bzero(buffer,1024);
        strcpy(buffer,"Hello client");
        send(client_sock,buffer,sizeof(buffer),0);
        bzero(buffer,1024);
        recv(client_sock,buffer,sizeof(buffer),0);
        printf("Client : ");
        puts(buffer);
        printf("\nSending Frame%d...",fcount);
        send(client_sock,&frame[fcount],sizeof(frame[fcount]),0);
        while(fcount!=10)
        {
            printf("waiting for Ack.....\n");
            res = recv(client_sock,&Ack,sizeof(Ack),0);
            if(res>0)
            {
                printf("\nAck Received for Frame%d....",fcount);
                fcount++;
                printf("\nSending Frame%d...",fcount);
                send(client_sock,&frame[fcount],sizeof(frame[fcount]),0);
            }
            else
            {
                printf("\nAck Not Received for Frame%d....",fcount);
                printf("Resending frame%d....",fcount);
                send(client_sock,&frame[fcount],sizeof(frame[fcount]),0);
            }
            
        }
        printf("All 10 Frames are Sended\n");
        close(client_sock);
        printf("Client Disconnected\n");
        fcount=0;


    }

    return 0;


}
